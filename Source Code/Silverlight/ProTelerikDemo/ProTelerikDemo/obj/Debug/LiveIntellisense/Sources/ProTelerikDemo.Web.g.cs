//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProTelerikDemo
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using ProTelerikDemo.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace ProTelerikDemo.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using ProTelerikDemo.Web.Resources;
    
    
    /// <summary>
    /// The 'Appointment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Appointment : Entity
    {
        
        private string _annotations;
        
        private EntityRef<Appointment> _appointment1;
        
        private EntityCollection<Appointment> _appointments1;
        
        private string _description;
        
        private DateTime _end;
        
        private int _id;
        
        private Nullable<int> _recurrenceParentID;
        
        private string _recurrenceRule;
        
        private DateTime _start;
        
        private string _subject;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnnotationsChanging(string value);
        partial void OnAnnotationsChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEndChanging(DateTime value);
        partial void OnEndChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRecurrenceParentIDChanging(Nullable<int> value);
        partial void OnRecurrenceParentIDChanged();
        partial void OnRecurrenceRuleChanging(string value);
        partial void OnRecurrenceRuleChanged();
        partial void OnStartChanging(DateTime value);
        partial void OnStartChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Appointment"/> class.
        /// </summary>
        public Appointment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Annotations' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Annotations
        {
            get
            {
                return this._annotations;
            }
            set
            {
                if ((this._annotations != value))
                {
                    this.OnAnnotationsChanging(value);
                    this.RaiseDataMemberChanging("Annotations");
                    this.ValidateProperty("Annotations", value);
                    this._annotations = value;
                    this.RaiseDataMemberChanged("Annotations");
                    this.OnAnnotationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Appointment"/> entity.
        /// </summary>
        [Association("Appointment_Appointment", "RecurrenceParentID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Appointment Appointment1
        {
            get
            {
                if ((this._appointment1 == null))
                {
                    this._appointment1 = new EntityRef<Appointment>(this, "Appointment1", this.FilterAppointment1);
                }
                return this._appointment1.Entity;
            }
            set
            {
                Appointment previous = this.Appointment1;
                if ((previous != value))
                {
                    this.ValidateProperty("Appointment1", value);
                    if ((previous != null))
                    {
                        this._appointment1.Entity = null;
                        previous.Appointments1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecurrenceParentID = value.ID;
                    }
                    else
                    {
                        this.RecurrenceParentID = default(Nullable<int>);
                    }
                    this._appointment1.Entity = value;
                    if ((value != null))
                    {
                        value.Appointments1.Add(this);
                    }
                    this.RaisePropertyChanged("Appointment1");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Appointment"/> entities.
        /// </summary>
        [Association("Appointment_Appointment", "ID", "RecurrenceParentID")]
        [XmlIgnore()]
        public EntityCollection<Appointment> Appointments1
        {
            get
            {
                if ((this._appointments1 == null))
                {
                    this._appointments1 = new EntityCollection<Appointment>(this, "Appointments1", this.FilterAppointments1, this.AttachAppointments1, this.DetachAppointments1);
                }
                return this._appointments1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(1024)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'End' value.
        /// </summary>
        [DataMember()]
        public DateTime End
        {
            get
            {
                return this._end;
            }
            set
            {
                if ((this._end != value))
                {
                    this.OnEndChanging(value);
                    this.RaiseDataMemberChanging("End");
                    this.ValidateProperty("End", value);
                    this._end = value;
                    this.RaiseDataMemberChanged("End");
                    this.OnEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecurrenceParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> RecurrenceParentID
        {
            get
            {
                return this._recurrenceParentID;
            }
            set
            {
                if ((this._recurrenceParentID != value))
                {
                    this.OnRecurrenceParentIDChanging(value);
                    this.RaiseDataMemberChanging("RecurrenceParentID");
                    this.ValidateProperty("RecurrenceParentID", value);
                    this._recurrenceParentID = value;
                    this.RaiseDataMemberChanged("RecurrenceParentID");
                    this.OnRecurrenceParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecurrenceRule' value.
        /// </summary>
        [DataMember()]
        [StringLength(1024)]
        public string RecurrenceRule
        {
            get
            {
                return this._recurrenceRule;
            }
            set
            {
                if ((this._recurrenceRule != value))
                {
                    this.OnRecurrenceRuleChanging(value);
                    this.RaiseDataMemberChanging("RecurrenceRule");
                    this.ValidateProperty("RecurrenceRule", value);
                    this._recurrenceRule = value;
                    this.RaiseDataMemberChanged("RecurrenceRule");
                    this.OnRecurrenceRuleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Start' value.
        /// </summary>
        [DataMember()]
        public DateTime Start
        {
            get
            {
                return this._start;
            }
            set
            {
                if ((this._start != value))
                {
                    this.OnStartChanging(value);
                    this.RaiseDataMemberChanging("Start");
                    this.ValidateProperty("Start", value);
                    this._start = value;
                    this.RaiseDataMemberChanged("Start");
                    this.OnStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        private bool FilterAppointment1(Appointment entity)
        {
            return (entity.ID == this.RecurrenceParentID);
        }
        
        private void AttachAppointments1(Appointment entity)
        {
            entity.Appointment1 = this;
        }
        
        private void DetachAppointments1(Appointment entity)
        {
            entity.Appointment1 = null;
        }
        
        private bool FilterAppointments1(Appointment entity)
        {
            return (entity.RecurrenceParentID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("ProTelerikDemo-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _categoryID;
        
        private string _categoryName;
        
        private string _description;
        
        private byte[] _picture;
        
        private EntityCollection<Product> _products;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaisePropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(15)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Picture' value.
        /// </summary>
        [DataMember()]
        public byte[] Picture
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnPictureChanging(value);
                    this.RaiseDataMemberChanging("Picture");
                    this.ValidateProperty("Picture", value);
                    this._picture = value;
                    this.RaiseDataMemberChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entities.
        /// </summary>
        [Association("Category_Product", "CategoryID", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<Product> Products
        {
            get
            {
                if ((this._products == null))
                {
                    this._products = new EntityCollection<Product>(this, "Products", this.FilterProducts, this.AttachProducts, this.DetachProducts);
                }
                return this._products;
            }
        }
        
        private void AttachProducts(Product entity)
        {
            entity.Category = this;
        }
        
        private void DetachProducts(Product entity)
        {
            entity.Category = null;
        }
        
        private bool FilterProducts(Product entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryID;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Customer : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private string _companyName;
        
        private string _contactName;
        
        private string _contactTitle;
        
        private string _country;
        
        private string _customerID;
        
        private string _fax;
        
        private EntityCollection<Order> _orders;
        
        private string _phone;
        
        private string _postalCode;
        
        private string _region;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(60)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(40)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactName' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ContactName
        {
            get
            {
                return this._contactName;
            }
            set
            {
                if ((this._contactName != value))
                {
                    this.OnContactNameChanging(value);
                    this.RaiseDataMemberChanging("ContactName");
                    this.ValidateProperty("ContactName", value);
                    this._contactName = value;
                    this.RaiseDataMemberChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactTitle' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ContactTitle
        {
            get
            {
                return this._contactTitle;
            }
            set
            {
                if ((this._contactTitle != value))
                {
                    this.OnContactTitleChanging(value);
                    this.RaiseDataMemberChanging("ContactTitle");
                    this.ValidateProperty("ContactTitle", value);
                    this._contactTitle = value;
                    this.RaiseDataMemberChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(5)]
        public string CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaisePropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Fax' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order"/> entities.
        /// </summary>
        [Association("Customer_Order", "CustomerID", "CustomerID")]
        [XmlIgnore()]
        public EntityCollection<Order> Orders
        {
            get
            {
                if ((this._orders == null))
                {
                    this._orders = new EntityCollection<Order>(this, "Orders", this.FilterOrders, this.AttachOrders, this.DetachOrders);
                }
                return this._orders;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Region' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnRegionChanging(value);
                    this.RaiseDataMemberChanging("Region");
                    this.ValidateProperty("Region", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }
        
        private void AttachOrders(Order entity)
        {
            entity.Customer = this;
        }
        
        private void DetachOrders(Order entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterOrders(Order entity)
        {
            return (entity.CustomerID == this.CustomerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._customerID;
        }
    }
    
    /// <summary>
    /// The 'CustomerDemographic' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class CustomerDemographic : Entity
    {
        
        private string _customerDesc;
        
        private string _customerTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerDescChanging(string value);
        partial void OnCustomerDescChanged();
        partial void OnCustomerTypeIDChanging(string value);
        partial void OnCustomerTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDemographic"/> class.
        /// </summary>
        public CustomerDemographic()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerDesc' value.
        /// </summary>
        [DataMember()]
        public string CustomerDesc
        {
            get
            {
                return this._customerDesc;
            }
            set
            {
                if ((this._customerDesc != value))
                {
                    this.OnCustomerDescChanging(value);
                    this.RaiseDataMemberChanging("CustomerDesc");
                    this.ValidateProperty("CustomerDesc", value);
                    this._customerDesc = value;
                    this.RaiseDataMemberChanged("CustomerDesc");
                    this.OnCustomerDescChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string CustomerTypeID
        {
            get
            {
                return this._customerTypeID;
            }
            set
            {
                if ((this._customerTypeID != value))
                {
                    this.OnCustomerTypeIDChanging(value);
                    this.ValidateProperty("CustomerTypeID", value);
                    this._customerTypeID = value;
                    this.RaisePropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._customerTypeID;
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Employee : Entity
    {
        
        private string _address;
        
        private Nullable<DateTime> _birthDate;
        
        private string _city;
        
        private string _country;
        
        private EntityRef<Employee> _employee1;
        
        private int _employeeID;
        
        private EntityCollection<Employee> _employees1;
        
        private string _extension;
        
        private string _firstName;
        
        private Nullable<DateTime> _hireDate;
        
        private string _homePhone;
        
        private string _lastName;
        
        private string _notes;
        
        private EntityCollection<Order> _orders;
        
        private byte[] _photo;
        
        private string _photoPath;
        
        private string _postalCode;
        
        private string _region;
        
        private Nullable<int> _reportsTo;
        
        private string _title;
        
        private string _titleOfCourtesy;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthDateChanging(Nullable<DateTime> value);
        partial void OnBirthDateChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnHireDateChanging(Nullable<DateTime> value);
        partial void OnHireDateChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhotoChanging(byte[] value);
        partial void OnPhotoChanged();
        partial void OnPhotoPathChanging(string value);
        partial void OnPhotoPathChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnReportsToChanging(Nullable<int> value);
        partial void OnReportsToChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTitleOfCourtesyChanging(string value);
        partial void OnTitleOfCourtesyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(60)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BirthDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                if ((this._birthDate != value))
                {
                    this.OnBirthDateChanging(value);
                    this.RaiseDataMemberChanging("BirthDate");
                    this.ValidateProperty("BirthDate", value);
                    this._birthDate = value;
                    this.RaiseDataMemberChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Employee", "ReportsTo", "EmployeeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.Employees1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportsTo = value.EmployeeID;
                    }
                    else
                    {
                        this.ReportsTo = default(Nullable<int>);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.Employees1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaisePropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entities.
        /// </summary>
        [Association("Employee_Employee", "EmployeeID", "ReportsTo")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees1
        {
            get
            {
                if ((this._employees1 == null))
                {
                    this._employees1 = new EntityCollection<Employee>(this, "Employees1", this.FilterEmployees1, this.AttachEmployees1, this.DetachEmployees1);
                }
                return this._employees1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Extension' value.
        /// </summary>
        [DataMember()]
        [StringLength(4)]
        public string Extension
        {
            get
            {
                return this._extension;
            }
            set
            {
                if ((this._extension != value))
                {
                    this.OnExtensionChanging(value);
                    this.RaiseDataMemberChanging("Extension");
                    this.ValidateProperty("Extension", value);
                    this._extension = value;
                    this.RaiseDataMemberChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HireDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> HireDate
        {
            get
            {
                return this._hireDate;
            }
            set
            {
                if ((this._hireDate != value))
                {
                    this.OnHireDateChanging(value);
                    this.RaiseDataMemberChanging("HireDate");
                    this.ValidateProperty("HireDate", value);
                    this._hireDate = value;
                    this.RaiseDataMemberChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HomePhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string HomePhone
        {
            get
            {
                return this._homePhone;
            }
            set
            {
                if ((this._homePhone != value))
                {
                    this.OnHomePhoneChanging(value);
                    this.RaiseDataMemberChanging("HomePhone");
                    this.ValidateProperty("HomePhone", value);
                    this._homePhone = value;
                    this.RaiseDataMemberChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order"/> entities.
        /// </summary>
        [Association("Employee_Order", "EmployeeID", "EmployeeID")]
        [XmlIgnore()]
        public EntityCollection<Order> Orders
        {
            get
            {
                if ((this._orders == null))
                {
                    this._orders = new EntityCollection<Order>(this, "Orders", this.FilterOrders, this.AttachOrders, this.DetachOrders);
                }
                return this._orders;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Photo' value.
        /// </summary>
        [DataMember()]
        public byte[] Photo
        {
            get
            {
                return this._photo;
            }
            set
            {
                if ((this._photo != value))
                {
                    this.OnPhotoChanging(value);
                    this.RaiseDataMemberChanging("Photo");
                    this.ValidateProperty("Photo", value);
                    this._photo = value;
                    this.RaiseDataMemberChanged("Photo");
                    this.OnPhotoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhotoPath' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string PhotoPath
        {
            get
            {
                return this._photoPath;
            }
            set
            {
                if ((this._photoPath != value))
                {
                    this.OnPhotoPathChanging(value);
                    this.RaiseDataMemberChanging("PhotoPath");
                    this.ValidateProperty("PhotoPath", value);
                    this._photoPath = value;
                    this.RaiseDataMemberChanged("PhotoPath");
                    this.OnPhotoPathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Region' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnRegionChanging(value);
                    this.RaiseDataMemberChanging("Region");
                    this.ValidateProperty("Region", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportsTo' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ReportsTo
        {
            get
            {
                return this._reportsTo;
            }
            set
            {
                if ((this._reportsTo != value))
                {
                    this.OnReportsToChanging(value);
                    this.RaiseDataMemberChanging("ReportsTo");
                    this.ValidateProperty("ReportsTo", value);
                    this._reportsTo = value;
                    this.RaiseDataMemberChanged("ReportsTo");
                    this.OnReportsToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TitleOfCourtesy' value.
        /// </summary>
        [DataMember()]
        [StringLength(25)]
        public string TitleOfCourtesy
        {
            get
            {
                return this._titleOfCourtesy;
            }
            set
            {
                if ((this._titleOfCourtesy != value))
                {
                    this.OnTitleOfCourtesyChanging(value);
                    this.RaiseDataMemberChanging("TitleOfCourtesy");
                    this.ValidateProperty("TitleOfCourtesy", value);
                    this._titleOfCourtesy = value;
                    this.RaiseDataMemberChanged("TitleOfCourtesy");
                    this.OnTitleOfCourtesyChanged();
                }
            }
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeID == this.ReportsTo);
        }
        
        private void AttachEmployees1(Employee entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachEmployees1(Employee entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterEmployees1(Employee entity)
        {
            return (entity.ReportsTo == this.EmployeeID);
        }
        
        private void AttachOrders(Order entity)
        {
            entity.Employee = this;
        }
        
        private void DetachOrders(Order entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterOrders(Order entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeID;
        }
    }
    
    /// <summary>
    /// The 'MonthlySales' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class MonthlySales : Entity
    {
        
        private int _month;
        
        private string _monthName;
        
        private decimal _sales;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMonthChanging(int value);
        partial void OnMonthChanged();
        partial void OnMonthNameChanging(string value);
        partial void OnMonthNameChanged();
        partial void OnSalesChanging(decimal value);
        partial void OnSalesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlySales"/> class.
        /// </summary>
        public MonthlySales()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Month' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Month
        {
            get
            {
                return this._month;
            }
            set
            {
                if ((this._month != value))
                {
                    this.OnMonthChanging(value);
                    this.ValidateProperty("Month", value);
                    this._month = value;
                    this.RaisePropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MonthName' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string MonthName
        {
            get
            {
                return this._monthName;
            }
            set
            {
                if ((this._monthName != value))
                {
                    this.OnMonthNameChanging(value);
                    this.RaiseDataMemberChanging("MonthName");
                    this.ValidateProperty("MonthName", value);
                    this._monthName = value;
                    this.RaiseDataMemberChanged("MonthName");
                    this.OnMonthNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sales' value.
        /// </summary>
        [DataMember()]
        public decimal Sales
        {
            get
            {
                return this._sales;
            }
            set
            {
                if ((this._sales != value))
                {
                    this.OnSalesChanging(value);
                    this.RaiseDataMemberChanging("Sales");
                    this.ValidateProperty("Sales", value);
                    this._sales = value;
                    this.RaiseDataMemberChanged("Sales");
                    this.OnSalesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._month;
        }
    }
    
    /// <summary>
    /// The 'Order' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Order : Entity
    {
        
        private EntityRef<Customer> _customer;
        
        private string _customerID;
        
        private EntityRef<Employee> _employee;
        
        private Nullable<int> _employeeID;
        
        private Nullable<decimal> _freight;
        
        private EntityCollection<Order_Detail> _order_Details;
        
        private Nullable<DateTime> _orderDate;
        
        private int _orderID;
        
        private Nullable<DateTime> _requiredDate;
        
        private string _shipAddress;
        
        private string _shipCity;
        
        private string _shipCountry;
        
        private string _shipName;
        
        private Nullable<DateTime> _shippedDate;
        
        private EntityRef<Shipper> _shipper;
        
        private string _shipPostalCode;
        
        private string _shipRegion;
        
        private Nullable<int> _shipVia;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnEmployeeIDChanging(Nullable<int> value);
        partial void OnEmployeeIDChanged();
        partial void OnFreightChanging(Nullable<decimal> value);
        partial void OnFreightChanged();
        partial void OnOrderDateChanging(Nullable<DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnRequiredDateChanging(Nullable<DateTime> value);
        partial void OnRequiredDateChanged();
        partial void OnShipAddressChanging(string value);
        partial void OnShipAddressChanged();
        partial void OnShipCityChanging(string value);
        partial void OnShipCityChanged();
        partial void OnShipCountryChanging(string value);
        partial void OnShipCountryChanged();
        partial void OnShipNameChanging(string value);
        partial void OnShipNameChanged();
        partial void OnShippedDateChanging(Nullable<DateTime> value);
        partial void OnShippedDateChanged();
        partial void OnShipPostalCodeChanging(string value);
        partial void OnShipPostalCodeChanged();
        partial void OnShipRegionChanging(string value);
        partial void OnShipRegionChanged();
        partial void OnShipViaChanging(Nullable<int> value);
        partial void OnShipViaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Order"/> class.
        /// </summary>
        public Order()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_Order", "CustomerID", "CustomerID", IsForeignKey=true)]
        [XmlIgnore()]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.Orders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerID = value.CustomerID;
                    }
                    else
                    {
                        this.CustomerID = default(string);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(5)]
        public string CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Order", "EmployeeID", "EmployeeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Orders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeID = value.EmployeeID;
                    }
                    else
                    {
                        this.EmployeeID = default(Nullable<int>);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Freight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                if ((this._freight != value))
                {
                    this.OnFreightChanging(value);
                    this.RaiseDataMemberChanging("Freight");
                    this.ValidateProperty("Freight", value);
                    this._freight = value;
                    this.RaiseDataMemberChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order_Detail"/> entities.
        /// </summary>
        [Association("Order_Order_Detail", "OrderID", "OrderID")]
        [XmlIgnore()]
        public EntityCollection<Order_Detail> Order_Details
        {
            get
            {
                if ((this._order_Details == null))
                {
                    this._order_Details = new EntityCollection<Order_Detail>(this, "Order_Details", this.FilterOrder_Details, this.AttachOrder_Details, this.DetachOrder_Details);
                }
                return this._order_Details;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                if ((this._orderDate != value))
                {
                    this.OnOrderDateChanging(value);
                    this.RaiseDataMemberChanging("OrderDate");
                    this.ValidateProperty("OrderDate", value);
                    this._orderDate = value;
                    this.RaiseDataMemberChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OrderID
        {
            get
            {
                return this._orderID;
            }
            set
            {
                if ((this._orderID != value))
                {
                    this.OnOrderIDChanging(value);
                    this.ValidateProperty("OrderID", value);
                    this._orderID = value;
                    this.RaisePropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequiredDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> RequiredDate
        {
            get
            {
                return this._requiredDate;
            }
            set
            {
                if ((this._requiredDate != value))
                {
                    this.OnRequiredDateChanging(value);
                    this.RaiseDataMemberChanging("RequiredDate");
                    this.ValidateProperty("RequiredDate", value);
                    this._requiredDate = value;
                    this.RaiseDataMemberChanged("RequiredDate");
                    this.OnRequiredDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipAddress' value.
        /// </summary>
        [DataMember()]
        [StringLength(60)]
        public string ShipAddress
        {
            get
            {
                return this._shipAddress;
            }
            set
            {
                if ((this._shipAddress != value))
                {
                    this.OnShipAddressChanging(value);
                    this.RaiseDataMemberChanging("ShipAddress");
                    this.ValidateProperty("ShipAddress", value);
                    this._shipAddress = value;
                    this.RaiseDataMemberChanged("ShipAddress");
                    this.OnShipAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipCity' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string ShipCity
        {
            get
            {
                return this._shipCity;
            }
            set
            {
                if ((this._shipCity != value))
                {
                    this.OnShipCityChanging(value);
                    this.RaiseDataMemberChanging("ShipCity");
                    this.ValidateProperty("ShipCity", value);
                    this._shipCity = value;
                    this.RaiseDataMemberChanged("ShipCity");
                    this.OnShipCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipCountry' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string ShipCountry
        {
            get
            {
                return this._shipCountry;
            }
            set
            {
                if ((this._shipCountry != value))
                {
                    this.OnShipCountryChanging(value);
                    this.RaiseDataMemberChanging("ShipCountry");
                    this.ValidateProperty("ShipCountry", value);
                    this._shipCountry = value;
                    this.RaiseDataMemberChanged("ShipCountry");
                    this.OnShipCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipName' value.
        /// </summary>
        [DataMember()]
        [StringLength(40)]
        public string ShipName
        {
            get
            {
                return this._shipName;
            }
            set
            {
                if ((this._shipName != value))
                {
                    this.OnShipNameChanging(value);
                    this.RaiseDataMemberChanging("ShipName");
                    this.ValidateProperty("ShipName", value);
                    this._shipName = value;
                    this.RaiseDataMemberChanged("ShipName");
                    this.OnShipNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShippedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ShippedDate
        {
            get
            {
                return this._shippedDate;
            }
            set
            {
                if ((this._shippedDate != value))
                {
                    this.OnShippedDateChanging(value);
                    this.RaiseDataMemberChanging("ShippedDate");
                    this.ValidateProperty("ShippedDate", value);
                    this._shippedDate = value;
                    this.RaiseDataMemberChanged("ShippedDate");
                    this.OnShippedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Shipper"/> entity.
        /// </summary>
        [Association("Shipper_Order", "ShipVia", "ShipperID", IsForeignKey=true)]
        [XmlIgnore()]
        public Shipper Shipper
        {
            get
            {
                if ((this._shipper == null))
                {
                    this._shipper = new EntityRef<Shipper>(this, "Shipper", this.FilterShipper);
                }
                return this._shipper.Entity;
            }
            set
            {
                Shipper previous = this.Shipper;
                if ((previous != value))
                {
                    this.ValidateProperty("Shipper", value);
                    if ((previous != null))
                    {
                        this._shipper.Entity = null;
                        previous.Orders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ShipVia = value.ShipperID;
                    }
                    else
                    {
                        this.ShipVia = default(Nullable<int>);
                    }
                    this._shipper.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                    }
                    this.RaisePropertyChanged("Shipper");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipPostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string ShipPostalCode
        {
            get
            {
                return this._shipPostalCode;
            }
            set
            {
                if ((this._shipPostalCode != value))
                {
                    this.OnShipPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("ShipPostalCode");
                    this.ValidateProperty("ShipPostalCode", value);
                    this._shipPostalCode = value;
                    this.RaiseDataMemberChanged("ShipPostalCode");
                    this.OnShipPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipRegion' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string ShipRegion
        {
            get
            {
                return this._shipRegion;
            }
            set
            {
                if ((this._shipRegion != value))
                {
                    this.OnShipRegionChanging(value);
                    this.RaiseDataMemberChanging("ShipRegion");
                    this.ValidateProperty("ShipRegion", value);
                    this._shipRegion = value;
                    this.RaiseDataMemberChanged("ShipRegion");
                    this.OnShipRegionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipVia' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ShipVia
        {
            get
            {
                return this._shipVia;
            }
            set
            {
                if ((this._shipVia != value))
                {
                    this.OnShipViaChanging(value);
                    this.RaiseDataMemberChanging("ShipVia");
                    this.ValidateProperty("ShipVia", value);
                    this._shipVia = value;
                    this.RaiseDataMemberChanged("ShipVia");
                    this.OnShipViaChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.CustomerID == this.CustomerID);
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        private void AttachOrder_Details(Order_Detail entity)
        {
            entity.Order = this;
        }
        
        private void DetachOrder_Details(Order_Detail entity)
        {
            entity.Order = null;
        }
        
        private bool FilterOrder_Details(Order_Detail entity)
        {
            return (entity.OrderID == this.OrderID);
        }
        
        private bool FilterShipper(Shipper entity)
        {
            return (entity.ShipperID == this.ShipVia);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._orderID;
        }
    }
    
    /// <summary>
    /// The 'Order_Detail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Order_Detail : Entity
    {
        
        private float _discount;
        
        private EntityRef<Order> _order;
        
        private int _orderID;
        
        private EntityRef<Product> _product;
        
        private int _productID;
        
        private short _quantity;
        
        private decimal _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiscountChanging(float value);
        partial void OnDiscountChanged();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnQuantityChanging(short value);
        partial void OnQuantityChanged();
        partial void OnUnitPriceChanging(decimal value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Order_Detail"/> class.
        /// </summary>
        public Order_Detail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Discount' value.
        /// </summary>
        [DataMember()]
        public float Discount
        {
            get
            {
                return this._discount;
            }
            set
            {
                if ((this._discount != value))
                {
                    this.OnDiscountChanging(value);
                    this.RaiseDataMemberChanging("Discount");
                    this.ValidateProperty("Discount", value);
                    this._discount = value;
                    this.RaiseDataMemberChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Order"/> entity.
        /// </summary>
        [Association("Order_Order_Detail", "OrderID", "OrderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Order Order
        {
            get
            {
                if ((this._order == null))
                {
                    this._order = new EntityRef<Order>(this, "Order", this.FilterOrder);
                }
                return this._order.Entity;
            }
            set
            {
                Order previous = this.Order;
                if ((previous != value))
                {
                    this.ValidateProperty("Order", value);
                    if ((previous != null))
                    {
                        this._order.Entity = null;
                        previous.Order_Details.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OrderID = value.OrderID;
                    }
                    else
                    {
                        this.OrderID = default(int);
                    }
                    this._order.Entity = value;
                    if ((value != null))
                    {
                        value.Order_Details.Add(this);
                    }
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int OrderID
        {
            get
            {
                return this._orderID;
            }
            set
            {
                if ((this._orderID != value))
                {
                    this.OnOrderIDChanging(value);
                    this.RaiseDataMemberChanging("OrderID");
                    this.ValidateProperty("OrderID", value);
                    this._orderID = value;
                    this.RaiseDataMemberChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_Order_Detail", "ProductID", "ProductID", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.Order_Details.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductID = value.ProductID;
                    }
                    else
                    {
                        this.ProductID = default(int);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.Order_Details.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public short Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public decimal UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        private bool FilterOrder(Order entity)
        {
            return (entity.OrderID == this.OrderID);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._orderID, this._productID);
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Product : Entity
    {
        
        private EntityRef<Category> _category;
        
        private Nullable<int> _categoryID;
        
        private bool _discontinued;
        
        private EntityCollection<Order_Detail> _order_Details;
        
        private int _productID;
        
        private string _productName;
        
        private string _quantityPerUnit;
        
        private Nullable<short> _reorderLevel;
        
        private EntityRef<Supplier> _supplier;
        
        private Nullable<int> _supplierID;
        
        private Nullable<decimal> _unitPrice;
        
        private Nullable<short> _unitsInStock;
        
        private Nullable<short> _unitsOnOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnDiscontinuedChanging(bool value);
        partial void OnDiscontinuedChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnQuantityPerUnitChanging(string value);
        partial void OnQuantityPerUnitChanged();
        partial void OnReorderLevelChanging(Nullable<short> value);
        partial void OnReorderLevelChanged();
        partial void OnSupplierIDChanging(Nullable<int> value);
        partial void OnSupplierIDChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();
        partial void OnUnitsInStockChanging(Nullable<short> value);
        partial void OnUnitsInStockChanged();
        partial void OnUnitsOnOrderChanging(Nullable<short> value);
        partial void OnUnitsOnOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_Product", "CategoryID", "CategoryID", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.Products.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this.CategoryID = default(Nullable<int>);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Discontinued' value.
        /// </summary>
        [DataMember()]
        public bool Discontinued
        {
            get
            {
                return this._discontinued;
            }
            set
            {
                if ((this._discontinued != value))
                {
                    this.OnDiscontinuedChanging(value);
                    this.RaiseDataMemberChanging("Discontinued");
                    this.ValidateProperty("Discontinued", value);
                    this._discontinued = value;
                    this.RaiseDataMemberChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order_Detail"/> entities.
        /// </summary>
        [Association("Product_Order_Detail", "ProductID", "ProductID")]
        [XmlIgnore()]
        public EntityCollection<Order_Detail> Order_Details
        {
            get
            {
                if ((this._order_Details == null))
                {
                    this._order_Details = new EntityCollection<Order_Detail>(this, "Order_Details", this.FilterOrder_Details, this.AttachOrder_Details, this.DetachOrder_Details);
                }
                return this._order_Details;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(40)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuantityPerUnit' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string QuantityPerUnit
        {
            get
            {
                return this._quantityPerUnit;
            }
            set
            {
                if ((this._quantityPerUnit != value))
                {
                    this.OnQuantityPerUnitChanging(value);
                    this.RaiseDataMemberChanging("QuantityPerUnit");
                    this.ValidateProperty("QuantityPerUnit", value);
                    this._quantityPerUnit = value;
                    this.RaiseDataMemberChanged("QuantityPerUnit");
                    this.OnQuantityPerUnitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReorderLevel' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> ReorderLevel
        {
            get
            {
                return this._reorderLevel;
            }
            set
            {
                if ((this._reorderLevel != value))
                {
                    this.OnReorderLevelChanging(value);
                    this.RaiseDataMemberChanging("ReorderLevel");
                    this.ValidateProperty("ReorderLevel", value);
                    this._reorderLevel = value;
                    this.RaiseDataMemberChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Supplier"/> entity.
        /// </summary>
        [Association("Supplier_Product", "SupplierID", "SupplierID", IsForeignKey=true)]
        [XmlIgnore()]
        public Supplier Supplier
        {
            get
            {
                if ((this._supplier == null))
                {
                    this._supplier = new EntityRef<Supplier>(this, "Supplier", this.FilterSupplier);
                }
                return this._supplier.Entity;
            }
            set
            {
                Supplier previous = this.Supplier;
                if ((previous != value))
                {
                    this.ValidateProperty("Supplier", value);
                    if ((previous != null))
                    {
                        this._supplier.Entity = null;
                        previous.Products.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SupplierID = value.SupplierID;
                    }
                    else
                    {
                        this.SupplierID = default(Nullable<int>);
                    }
                    this._supplier.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                    }
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> SupplierID
        {
            get
            {
                return this._supplierID;
            }
            set
            {
                if ((this._supplierID != value))
                {
                    this.OnSupplierIDChanging(value);
                    this.RaiseDataMemberChanging("SupplierID");
                    this.ValidateProperty("SupplierID", value);
                    this._supplierID = value;
                    this.RaiseDataMemberChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitsInStock' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> UnitsInStock
        {
            get
            {
                return this._unitsInStock;
            }
            set
            {
                if ((this._unitsInStock != value))
                {
                    this.OnUnitsInStockChanging(value);
                    this.RaiseDataMemberChanging("UnitsInStock");
                    this.ValidateProperty("UnitsInStock", value);
                    this._unitsInStock = value;
                    this.RaiseDataMemberChanged("UnitsInStock");
                    this.OnUnitsInStockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitsOnOrder' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> UnitsOnOrder
        {
            get
            {
                return this._unitsOnOrder;
            }
            set
            {
                if ((this._unitsOnOrder != value))
                {
                    this.OnUnitsOnOrderChanging(value);
                    this.RaiseDataMemberChanging("UnitsOnOrder");
                    this.ValidateProperty("UnitsOnOrder", value);
                    this._unitsOnOrder = value;
                    this.RaiseDataMemberChanged("UnitsOnOrder");
                    this.OnUnitsOnOrderChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private void AttachOrder_Details(Order_Detail entity)
        {
            entity.Product = this;
        }
        
        private void DetachOrder_Details(Order_Detail entity)
        {
            entity.Product = null;
        }
        
        private bool FilterOrder_Details(Order_Detail entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        private bool FilterSupplier(Supplier entity)
        {
            return (entity.SupplierID == this.SupplierID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'Region' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Region : Entity
    {
        
        private string _regionDescription;
        
        private int _regionID;
        
        private EntityCollection<Territory> _territories;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegionDescriptionChanging(string value);
        partial void OnRegionDescriptionChanged();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'RegionDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string RegionDescription
        {
            get
            {
                return this._regionDescription;
            }
            set
            {
                if ((this._regionDescription != value))
                {
                    this.OnRegionDescriptionChanging(value);
                    this.RaiseDataMemberChanging("RegionDescription");
                    this.ValidateProperty("RegionDescription", value);
                    this._regionDescription = value;
                    this.RaiseDataMemberChanged("RegionDescription");
                    this.OnRegionDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.ValidateProperty("RegionID", value);
                    this._regionID = value;
                    this.RaisePropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Territory"/> entities.
        /// </summary>
        [Association("Region_Territory", "RegionID", "RegionID")]
        [XmlIgnore()]
        public EntityCollection<Territory> Territories
        {
            get
            {
                if ((this._territories == null))
                {
                    this._territories = new EntityCollection<Territory>(this, "Territories", this.FilterTerritories, this.AttachTerritories, this.DetachTerritories);
                }
                return this._territories;
            }
        }
        
        private void AttachTerritories(Territory entity)
        {
            entity.Region = this;
        }
        
        private void DetachTerritories(Territory entity)
        {
            entity.Region = null;
        }
        
        private bool FilterTerritories(Territory entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._regionID;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'Shipper' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Shipper : Entity
    {
        
        private string _companyName;
        
        private EntityCollection<Order> _orders;
        
        private string _phone;
        
        private int _shipperID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnShipperIDChanging(int value);
        partial void OnShipperIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipper"/> class.
        /// </summary>
        public Shipper()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(40)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order"/> entities.
        /// </summary>
        [Association("Shipper_Order", "ShipperID", "ShipVia")]
        [XmlIgnore()]
        public EntityCollection<Order> Orders
        {
            get
            {
                if ((this._orders == null))
                {
                    this._orders = new EntityCollection<Order>(this, "Orders", this.FilterOrders, this.AttachOrders, this.DetachOrders);
                }
                return this._orders;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipperID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ShipperID
        {
            get
            {
                return this._shipperID;
            }
            set
            {
                if ((this._shipperID != value))
                {
                    this.OnShipperIDChanging(value);
                    this.ValidateProperty("ShipperID", value);
                    this._shipperID = value;
                    this.RaisePropertyChanged("ShipperID");
                    this.OnShipperIDChanged();
                }
            }
        }
        
        private void AttachOrders(Order entity)
        {
            entity.Shipper = this;
        }
        
        private void DetachOrders(Order entity)
        {
            entity.Shipper = null;
        }
        
        private bool FilterOrders(Order entity)
        {
            return (entity.ShipVia == this.ShipperID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._shipperID;
        }
    }
    
    /// <summary>
    /// The 'Supplier' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Supplier : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private string _companyName;
        
        private string _contactName;
        
        private string _contactTitle;
        
        private string _country;
        
        private string _fax;
        
        private string _homePage;
        
        private string _phone;
        
        private string _postalCode;
        
        private EntityCollection<Product> _products;
        
        private string _region;
        
        private int _supplierID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnHomePageChanging(string value);
        partial void OnHomePageChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnSupplierIDChanging(int value);
        partial void OnSupplierIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Supplier"/> class.
        /// </summary>
        public Supplier()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(60)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(40)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactName' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ContactName
        {
            get
            {
                return this._contactName;
            }
            set
            {
                if ((this._contactName != value))
                {
                    this.OnContactNameChanging(value);
                    this.RaiseDataMemberChanging("ContactName");
                    this.ValidateProperty("ContactName", value);
                    this._contactName = value;
                    this.RaiseDataMemberChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactTitle' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ContactTitle
        {
            get
            {
                return this._contactTitle;
            }
            set
            {
                if ((this._contactTitle != value))
                {
                    this.OnContactTitleChanging(value);
                    this.RaiseDataMemberChanging("ContactTitle");
                    this.ValidateProperty("ContactTitle", value);
                    this._contactTitle = value;
                    this.RaiseDataMemberChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Fax' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HomePage' value.
        /// </summary>
        [DataMember()]
        public string HomePage
        {
            get
            {
                return this._homePage;
            }
            set
            {
                if ((this._homePage != value))
                {
                    this.OnHomePageChanging(value);
                    this.RaiseDataMemberChanging("HomePage");
                    this.ValidateProperty("HomePage", value);
                    this._homePage = value;
                    this.RaiseDataMemberChanged("HomePage");
                    this.OnHomePageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(24)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entities.
        /// </summary>
        [Association("Supplier_Product", "SupplierID", "SupplierID")]
        [XmlIgnore()]
        public EntityCollection<Product> Products
        {
            get
            {
                if ((this._products == null))
                {
                    this._products = new EntityCollection<Product>(this, "Products", this.FilterProducts, this.AttachProducts, this.DetachProducts);
                }
                return this._products;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Region' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnRegionChanging(value);
                    this.RaiseDataMemberChanging("Region");
                    this.ValidateProperty("Region", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SupplierID
        {
            get
            {
                return this._supplierID;
            }
            set
            {
                if ((this._supplierID != value))
                {
                    this.OnSupplierIDChanging(value);
                    this.ValidateProperty("SupplierID", value);
                    this._supplierID = value;
                    this.RaisePropertyChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }
        
        private void AttachProducts(Product entity)
        {
            entity.Supplier = this;
        }
        
        private void DetachProducts(Product entity)
        {
            entity.Supplier = null;
        }
        
        private bool FilterProducts(Product entity)
        {
            return (entity.SupplierID == this.SupplierID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._supplierID;
        }
    }
    
    /// <summary>
    /// The 'Territory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class Territory : Entity
    {
        
        private EntityRef<Region> _region;
        
        private int _regionID;
        
        private string _territoryDescription;
        
        private string _territoryID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();
        partial void OnTerritoryDescriptionChanging(string value);
        partial void OnTerritoryDescriptionChanged();
        partial void OnTerritoryIDChanging(string value);
        partial void OnTerritoryIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Territory"/> class.
        /// </summary>
        public Territory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Territory", "RegionID", "RegionID", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Territories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionID = value.RegionID;
                    }
                    else
                    {
                        this.RegionID = default(int);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Territories.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.RaiseDataMemberChanging("RegionID");
                    this.ValidateProperty("RegionID", value);
                    this._regionID = value;
                    this.RaiseDataMemberChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TerritoryDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string TerritoryDescription
        {
            get
            {
                return this._territoryDescription;
            }
            set
            {
                if ((this._territoryDescription != value))
                {
                    this.OnTerritoryDescriptionChanging(value);
                    this.RaiseDataMemberChanging("TerritoryDescription");
                    this.ValidateProperty("TerritoryDescription", value);
                    this._territoryDescription = value;
                    this.RaiseDataMemberChanged("TerritoryDescription");
                    this.OnTerritoryDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TerritoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string TerritoryID
        {
            get
            {
                return this._territoryID;
            }
            set
            {
                if ((this._territoryID != value))
                {
                    this.OnTerritoryIDChanging(value);
                    this.ValidateProperty("TerritoryID", value);
                    this._territoryID = value;
                    this.RaisePropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._territoryID;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTelerikDemo.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("ProTelerikDemo-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace ProTelerikDemo.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using ProTelerikDemo.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'NorthwindDomainService' domain service.
    /// </summary>
    public sealed partial class NorthwindDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NorthwindDomainContext"/> class.
        /// </summary>
        public NorthwindDomainContext() : 
                this(new WebDomainClient<INorthwindDomainServiceContract>(new Uri("ProTelerikDemo-Web-Services-NorthwindDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NorthwindDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The NorthwindDomainService service URI.</param>
        public NorthwindDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<INorthwindDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NorthwindDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public NorthwindDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Appointment"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Appointment> Appointments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Appointment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CustomerDemographic"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<CustomerDemographic> CustomerDemographics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CustomerDemographic>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Order"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Order> Orders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Order>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MonthlySales"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<MonthlySales> MonthlySales
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MonthlySales>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Order_Detail"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Order_Detail> Order_Details
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Order_Detail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Region"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Shipper"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Shipper> Shippers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Shipper>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Supplier"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Supplier> Suppliers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Supplier>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Territory"/> entities that have been loaded into this <see cref="NorthwindDomainContext"/> instance.
        /// </summary>
        public EntitySet<Territory> Territories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Territory>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Appointment"/> entities using the 'GetAppointments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Appointment"/> entities.</returns>
        public EntityQuery<Appointment> GetAppointmentsQuery()
        {
            this.ValidateMethod("GetAppointmentsQuery", null);
            return base.CreateQuery<Appointment>("GetAppointments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entities using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entities.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CustomerDemographic"/> entities using the 'GetCustomerDemographics' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CustomerDemographic"/> entities.</returns>
        public EntityQuery<CustomerDemographic> GetCustomerDemographicsQuery()
        {
            this.ValidateMethod("GetCustomerDemographicsQuery", null);
            return base.CreateQuery<CustomerDemographic>("GetCustomerDemographics", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entities using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entities.</returns>
        public EntityQuery<Customer> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<Customer>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order"/> entities using the 'GetEmployeeOrders' query.
        /// </summary>
        /// <param name="employeeId">The value for the 'employeeId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entities.</returns>
        public EntityQuery<Order> GetEmployeeOrdersQuery(int employeeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("employeeId", employeeId);
            this.ValidateMethod("GetEmployeeOrdersQuery", parameters);
            return base.CreateQuery<Order>("GetEmployeeOrders", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entities using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entities.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entities using the 'GetEmployeesByTerritory' query.
        /// </summary>
        /// <param name="territory">The value for the 'territory' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entities.</returns>
        public EntityQuery<Employee> GetEmployeesByTerritoryQuery(string territory)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("territory", territory);
            this.ValidateMethod("GetEmployeesByTerritoryQuery", parameters);
            return base.CreateQuery<Employee>("GetEmployeesByTerritory", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MonthlySales"/> entities using the 'GetMonthlySales' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MonthlySales"/> entities.</returns>
        public EntityQuery<MonthlySales> GetMonthlySalesQuery()
        {
            this.ValidateMethod("GetMonthlySalesQuery", null);
            return base.CreateQuery<MonthlySales>("GetMonthlySales", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entities using the 'GetMostExpensiveProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entities.</returns>
        public EntityQuery<Product> GetMostExpensiveProductsQuery()
        {
            this.ValidateMethod("GetMostExpensiveProductsQuery", null);
            return base.CreateQuery<Product>("GetMostExpensiveProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order_Detail"/> entities using the 'GetOrder_Details' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order_Detail"/> entities.</returns>
        public EntityQuery<Order_Detail> GetOrder_DetailsQuery()
        {
            this.ValidateMethod("GetOrder_DetailsQuery", null);
            return base.CreateQuery<Order_Detail>("GetOrder_Details", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order"/> entities using the 'GetOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entities.</returns>
        public EntityQuery<Order> GetOrdersQuery()
        {
            this.ValidateMethod("GetOrdersQuery", null);
            return base.CreateQuery<Order>("GetOrders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entities using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entities.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entities using the 'GetRegions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entities.</returns>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Shipper"/> entities using the 'GetShippers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Shipper"/> entities.</returns>
        public EntityQuery<Shipper> GetShippersQuery()
        {
            this.ValidateMethod("GetShippersQuery", null);
            return base.CreateQuery<Shipper>("GetShippers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Supplier"/> entities using the 'GetSuppliers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Supplier"/> entities.</returns>
        public EntityQuery<Supplier> GetSuppliersQuery()
        {
            this.ValidateMethod("GetSuppliersQuery", null);
            return base.CreateQuery<Supplier>("GetSuppliers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Territory"/> entities using the 'GetTerritories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Territory"/> entities.</returns>
        public EntityQuery<Territory> GetTerritoriesQuery()
        {
            this.ValidateMethod("GetTerritoriesQuery", null);
            return base.CreateQuery<Territory>("GetTerritories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Territory"/> entities using the 'GetTerritoriesByRegion' query.
        /// </summary>
        /// <param name="RegionID">The value for the 'RegionID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Territory"/> entities.</returns>
        public EntityQuery<Territory> GetTerritoriesByRegionQuery(int RegionID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("RegionID", RegionID);
            this.ValidateMethod("GetTerritoriesByRegionQuery", parameters);
            return base.CreateQuery<Territory>("GetTerritoriesByRegion", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NorthwindDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'NorthwindDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface INorthwindDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAppointments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetAppointmentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetAppointments", ReplyAction="http://tempuri.org/NorthwindDomainService/GetAppointmentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAppointments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAppointments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAppointments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAppointments' operation.</returns>
            QueryResult<Appointment> EndGetAppointments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetCategories", ReplyAction="http://tempuri.org/NorthwindDomainService/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomerDemographics' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetCustomerDemographicsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetCustomerDemographics", ReplyAction="http://tempuri.org/NorthwindDomainService/GetCustomerDemographicsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomerDemographics(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomerDemographics'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomerDemographics'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomerDemographics' operation.</returns>
            QueryResult<CustomerDemographic> EndGetCustomerDemographics(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetCustomersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetCustomers", ReplyAction="http://tempuri.org/NorthwindDomainService/GetCustomersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<Customer> EndGetCustomers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeeOrders' operation.
            /// </summary>
            /// <param name="employeeId">The value for the 'employeeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetEmployeeOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetEmployeeOrders", ReplyAction="http://tempuri.org/NorthwindDomainService/GetEmployeeOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeeOrders(int employeeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeeOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeeOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeeOrders' operation.</returns>
            QueryResult<Order> EndGetEmployeeOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetEmployees", ReplyAction="http://tempuri.org/NorthwindDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeesByTerritory' operation.
            /// </summary>
            /// <param name="territory">The value for the 'territory' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetEmployeesByTerritoryDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetEmployeesByTerritory", ReplyAction="http://tempuri.org/NorthwindDomainService/GetEmployeesByTerritoryResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeesByTerritory(string territory, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeesByTerritory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeesByTerritory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeesByTerritory' operation.</returns>
            QueryResult<Employee> EndGetEmployeesByTerritory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMonthlySales' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetMonthlySalesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetMonthlySales", ReplyAction="http://tempuri.org/NorthwindDomainService/GetMonthlySalesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMonthlySales(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMonthlySales'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMonthlySales'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMonthlySales' operation.</returns>
            QueryResult<MonthlySales> EndGetMonthlySales(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMostExpensiveProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetMostExpensiveProductsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetMostExpensiveProducts", ReplyAction="http://tempuri.org/NorthwindDomainService/GetMostExpensiveProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMostExpensiveProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMostExpensiveProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMostExpensiveProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMostExpensiveProducts' operation.</returns>
            QueryResult<Product> EndGetMostExpensiveProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrder_Details' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetOrder_DetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetOrder_Details", ReplyAction="http://tempuri.org/NorthwindDomainService/GetOrder_DetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrder_Details(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrder_Details'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrder_Details'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrder_Details' operation.</returns>
            QueryResult<Order_Detail> EndGetOrder_Details(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetOrders", ReplyAction="http://tempuri.org/NorthwindDomainService/GetOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrders' operation.</returns>
            QueryResult<Order> EndGetOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetProducts", ReplyAction="http://tempuri.org/NorthwindDomainService/GetProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetRegionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetRegions", ReplyAction="http://tempuri.org/NorthwindDomainService/GetRegionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetShippers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetShippersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetShippers", ReplyAction="http://tempuri.org/NorthwindDomainService/GetShippersResponse")]
            [WebGet()]
            IAsyncResult BeginGetShippers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetShippers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetShippers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetShippers' operation.</returns>
            QueryResult<Shipper> EndGetShippers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSuppliers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetSuppliersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetSuppliers", ReplyAction="http://tempuri.org/NorthwindDomainService/GetSuppliersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSuppliers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSuppliers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSuppliers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSuppliers' operation.</returns>
            QueryResult<Supplier> EndGetSuppliers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTerritories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetTerritoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetTerritories", ReplyAction="http://tempuri.org/NorthwindDomainService/GetTerritoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTerritories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTerritories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTerritories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTerritories' operation.</returns>
            QueryResult<Territory> EndGetTerritories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTerritoriesByRegion' operation.
            /// </summary>
            /// <param name="RegionID">The value for the 'RegionID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/GetTerritoriesByRegionDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/GetTerritoriesByRegion", ReplyAction="http://tempuri.org/NorthwindDomainService/GetTerritoriesByRegionResponse")]
            [WebGet()]
            IAsyncResult BeginGetTerritoriesByRegion(int RegionID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTerritoriesByRegion'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTerritoriesByRegion'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTerritoriesByRegion' operation.</returns>
            QueryResult<Territory> EndGetTerritoriesByRegion(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NorthwindDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NorthwindDomainService/SubmitChanges", ReplyAction="http://tempuri.org/NorthwindDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NorthwindDomainContextEntityContainer : EntityContainer
        {
            
            public NorthwindDomainContextEntityContainer()
            {
                this.CreateEntitySet<Appointment>(EntitySetOperations.All);
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<CustomerDemographic>(EntitySetOperations.All);
                this.CreateEntitySet<Employee>(EntitySetOperations.All);
                this.CreateEntitySet<MonthlySales>(EntitySetOperations.None);
                this.CreateEntitySet<Order>(EntitySetOperations.All);
                this.CreateEntitySet<Order_Detail>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<Region>(EntitySetOperations.All);
                this.CreateEntitySet<Shipper>(EntitySetOperations.All);
                this.CreateEntitySet<Supplier>(EntitySetOperations.All);
                this.CreateEntitySet<Territory>(EntitySetOperations.All);
            }
        }
    }
}
